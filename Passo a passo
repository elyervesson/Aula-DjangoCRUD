Configurando o Ambiente

	# download pip:
		https://bootstrap.pypa.io/get-pip.py
	# instalando pip e virtualenv:
		$ sudo python get-pip.py
		$ sudo pip install virtualenv
	# iniciando um novo ambiente virtual:
		$ virtualenv <env_name>
	# ativando o seu ambiente virtual (dentro da pasta <env_name>):
		$ source bin/activate
	# instalando Django:
		(<env_name>)$ pip install Django
	# comando para listar os pacotes instaladas no seu env:
		(<env_name>)$ pip freeze


Iniciando o Desenvolvimento

	# criando um projeto:
		(<env_name>)$ django-admin startproject <proj_name>
	# iniciando o servidor:
		(<env_name>)$ python manage.py runserver
	# se a porta tiver ocupada vc pode modifica-la:
		(<env_name>)$ python manage.py runserver <porta>
	# se quiser mudar o ip tbm pode:
		(<env_name>)$ python manage.py runserver <ip>:<porta>
	# acesse a pagina em:
		http://127.0.0.1:8000/
	# Apos iniciar o servidor o Django vai reclamar que nao foram aplicadas as 'migracoes' (You have unapplied migrations; your app may not work properly until they are applied. Run 'python manage.py migrate' to apply them). Esse comando vai olhar em INSTALLED_APPS e criar qualquer tabela necessaria:
		(<env_name>)$ python manage.py migrate
	# acesse a pagina de administracao:
		http://127.0.0.1:8000/admin
	# criar um usuario para acessar a pagina de admin:
		(<env_name>)$ python manage.py createsuperuser


	# criar um novo aplicativo dentro do seu projeto:
		(<env_name>)$ python manage.py startapp <app_name>
	# adiciona o novo app aos INSTALLED_APPS do seu projeto em settings
		INSTALLED_APPS = [
		    '...',
		    '<app_name>',
		]
	# apos adicionar entidades ao seu app vc precisar executar os comando a seguir com o intuito de atualizar o banco de dados do seu projeto com as tabelas para as novas entidades criadas:
		(<env_name>)$ python manage.py makemigrations
		(<env_name>)$ python manage.py migrate

	# se voce quiser executar comando diretamente no shell do python voce pode executar o seguinte comando:
		(<env_name>)$ python manage.py shell
	# para poder adicionar/modificar entidades na area de administracao vc deve registra-las em admin.py
		admin.site.register(<Entidade>)


Algumas informacoes sobre a estrutura de um projeto em Django:
	
	# a seguinte arvore representa a estrutura de arquivos do seu novo projeto
		
		project_name/
			[manage.py ] # esse eh o carinha que gerencia tudo. vc sempre executa as coisas por aqui
			[db.sqlite3] # banco de dados do projeto. criado na primeira execucao ou migracao
			project_name/
				[__init__.py] # indica um pacote em python
				[settings.py] # arquivo de configuracoes do projeto. lugar onde adicionamos os novos apps e tambem configuramos banco de dados, etc
				[urls.py    ] # arquivo de urls principal do projeto. devemos importar os arquivos de urls dos nossos apps aqui
				[wsgi.py    ] # ¯\_(ツ)_/¯


	# informacoes sobre a estrutura de um app:

		app_name/
			[__init__.py] # indica um pacote em python
			[admin.py   ] # lugar onde devemos indicar as entidades que poderam ser gerenciadas a partir da area de administracao
			[apps.py    ] # ¯\_(ツ)_/¯
			[models.py  ] # onde definimos as entidades que utilizaremos neste app
			[tests.py   ] # ¯\_(ツ)_/¯
			[views.py   ] # onde definimos as funcoes responsaves por conversar com nossos templates html
			[urls.py    ] # arquivo criado por voce para modularizar as urls do seu app. vc tem que lembrar de incluir uma referencia a este arquivo no arquivo de urls principal
			migrations/
				# neste diretorio ficam arquivos utilizados pelo django para migrar as informacoes necessarias para o banco de dados
			templates/
				# diretorio criado por voce para armazenar os seus templates html

	# INICIO DO DESENVOLVIMENTO DO CRUD ALUNO

		1) Adicionar um novo modelos em (crudAluno/models.py)
		2) Registrar os modelos criados em crudAluno/admin.py

		/ Para "brincar" com os modelos criados basta executar os comandos
		/ [python manage.py shell] então [import django] e [django.setup()]
		/ apos isso importe os modelos [from crudAluno.models import Pessoa, Aluno]
		/ e então deve ser possivel utilizar os comandos para mecher com o 
		/ banco de dados (https://docs.djangoproject.com/en/1.9/intro/tutorial02/)

		3) Criar os Forms de Pessoa e Aluno
		4) Passar as pessoas ja cadastradas do BD para o HTML (em views.py)
		5) Criar a pagina HTML que exibe todas as pessoas cadastradas (lista_pessoas.html)
		6) Adicionar a referencia de crudAluno/urls.py em projetoASUS/urls.py
		7) Criar o arquivo projetoASUS/urls.py e adicionar a rota 'lista_pessoas/'